{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Standarisasi Berikut ini adalah standarisasi untuk pengerjaan proyek-proyek yang ada di unit bisnis Algo Network baik itu Braincore, Megalogic, dan Bizzagi. Standarisasi ini dibuat agar semua orang yang ada di dalamnya bisa mempelajarinya dan berbicara dalam bahasa/library/framework/tools yang sama, sehingga ketika ada proyek yang membutuhkan orang-orang dari divisi atau unit bisnis yang berbeda (cross-division project), tantangan dalam adaptasinya tidak terlalu besar Introduction to Algo Network Data Analyst and Business Intelligence Internet of Things (IoT) AI/ML Modelling AI/ML Deployment Frontend Backend Mobile QA Manual QA Automation Database Deployment Blockchain RnD UI/UX Design Graphic Design Project Management SEO Tools","title":"Home"},{"location":"#standarisasi","text":"Berikut ini adalah standarisasi untuk pengerjaan proyek-proyek yang ada di unit bisnis Algo Network baik itu Braincore, Megalogic, dan Bizzagi. Standarisasi ini dibuat agar semua orang yang ada di dalamnya bisa mempelajarinya dan berbicara dalam bahasa/library/framework/tools yang sama, sehingga ketika ada proyek yang membutuhkan orang-orang dari divisi atau unit bisnis yang berbeda (cross-division project), tantangan dalam adaptasinya tidak terlalu besar Introduction to Algo Network Data Analyst and Business Intelligence Internet of Things (IoT) AI/ML Modelling AI/ML Deployment Frontend Backend Mobile QA Manual QA Automation Database Deployment Blockchain RnD UI/UX Design Graphic Design Project Management SEO Tools","title":"Standarisasi"},{"location":"01_introduction_to_algo_network/","text":"Introduction to Algo Network Algo Network adalah sebuah perusahaan holding group di bawah nama PT. Algonacci Sobat Nusantara, yang sampai tulisan ini dibuat, memiliki 3 unit bisnis, yaitu Braincore , Megalogic , dan Bizzagi . Tulisan di bawah ini akan menjelaskan tentang masing-masing bisnis unit, dan bagaimana cara kerja di Algo Network Braincore Braincore adalah sebuah perusahaan yang bergerak di bidang hi-tech , utamanya di bidang AI/ML. Ada beberapa bidang yang digarap, meliputi: AI (termasuk di dalamnya Data Science dan Machine Learning) Internet of Things atau IoT Network Engineering Blockchain Cyber Security Braincore memiliki beberapa proker, yakni Projects Consultant Research paper Open source projects Products Services Blog posting Content creation Training of Trainer (ToT) Curriculum development In-house training Bootcamp Mentorship Webinar Marketing Private dataset Lomba Megalogic Megalogic adalah sebuah software house biasa pada umumnya, adapun bidang yang dikerjakan adalah: Frontend Backend Mobile Quality assurance Bizzagi Bizzagi adalah sebuah digital marketing agency yang mengurus upaya pemasaran (marketing) dari segala unit bisnis yang ada di Algo Network, termasuk Braincore dan juga Megalogic. Namun Bizzagi juga memiliki model bisnisnya sendiri untuk survive, berikut diantaranya: SEO audit and technical SEO Graphic designs UI/UX designs Market research Social media marketing and management Marketplace optimization Ads management Copywriting Email marketing Digital campaign Project management KOL specialist Video editing Motion graphics Brand identity Communication channel Ada 2 kanal komunikasi yang utama di Algo Network dan unit bisnisnya, yaitu adalah menggunakan WhatsApp dan Discord Silahkan contact ke Eric atau Lead Divisinya untuk bergabung ke grup WhatsApp dan juga server Discord Sprint grooming Di Algo Network dan semua unit bisnisnya, menganut sistem Sprint yang merupakan turunan dari sistem Agile dan metodologi dari Scrum. Sprint digunakan untuk mendeskripsikan satu siklus pengembangan yang terbatas waktu. Sprint biasanya berlangsung selama 1 minggu atau 5 hari kerja dari Senin sampai Jumat, dengan tujuan untuk menghasilkan produk, fitur, atau hasil pekerjaan yang dapat dioperasikan dan siap untuk diluncurkan atau tahapan pengembangan selanjutnya. Di dalam 1 sprint ini ada terjadi beberapa event: Task Delegation: Proses pemberian tugas dari Eric ke masing-masing Lead Divisi Task Break Down: Proses break-down atau perincian tugas dari masing-masing Lead Divisi untuk setiap anggota timnya Sprint Grooming: Proses memposting task apa saja yang akan dikerjakan selama 1 sprint itu Development: Proses pengerjaan dan pengembangan selama 1 sprint (5 hari kerja) Weekly Report: Proses pelaporan di akhir minggu, apa saja yang sudah dan belum selesai Daily standup Merupakan meeting yang diadakan setiap harinya untuk mengontrol proses pengerjaan dan pengembangan, melakukan daily report, terjadi di sore hari jam 5 Mandatory meetings Ada beberapa meeting penting di dalam Algo Network: Monthly sync Town hall Training of Trainer Meeting divisi Kembali ke Home","title":"Introduction to Algo Network"},{"location":"01_introduction_to_algo_network/#introduction-to-algo-network","text":"Algo Network adalah sebuah perusahaan holding group di bawah nama PT. Algonacci Sobat Nusantara, yang sampai tulisan ini dibuat, memiliki 3 unit bisnis, yaitu Braincore , Megalogic , dan Bizzagi . Tulisan di bawah ini akan menjelaskan tentang masing-masing bisnis unit, dan bagaimana cara kerja di Algo Network","title":"Introduction to Algo Network"},{"location":"01_introduction_to_algo_network/#braincore","text":"Braincore adalah sebuah perusahaan yang bergerak di bidang hi-tech , utamanya di bidang AI/ML. Ada beberapa bidang yang digarap, meliputi: AI (termasuk di dalamnya Data Science dan Machine Learning) Internet of Things atau IoT Network Engineering Blockchain Cyber Security Braincore memiliki beberapa proker, yakni Projects Consultant Research paper Open source projects Products Services Blog posting Content creation Training of Trainer (ToT) Curriculum development In-house training Bootcamp Mentorship Webinar Marketing Private dataset Lomba","title":"Braincore"},{"location":"01_introduction_to_algo_network/#megalogic","text":"Megalogic adalah sebuah software house biasa pada umumnya, adapun bidang yang dikerjakan adalah: Frontend Backend Mobile Quality assurance","title":"Megalogic"},{"location":"01_introduction_to_algo_network/#bizzagi","text":"Bizzagi adalah sebuah digital marketing agency yang mengurus upaya pemasaran (marketing) dari segala unit bisnis yang ada di Algo Network, termasuk Braincore dan juga Megalogic. Namun Bizzagi juga memiliki model bisnisnya sendiri untuk survive, berikut diantaranya: SEO audit and technical SEO Graphic designs UI/UX designs Market research Social media marketing and management Marketplace optimization Ads management Copywriting Email marketing Digital campaign Project management KOL specialist Video editing Motion graphics Brand identity","title":"Bizzagi"},{"location":"01_introduction_to_algo_network/#communication-channel","text":"Ada 2 kanal komunikasi yang utama di Algo Network dan unit bisnisnya, yaitu adalah menggunakan WhatsApp dan Discord Silahkan contact ke Eric atau Lead Divisinya untuk bergabung ke grup WhatsApp dan juga server Discord","title":"Communication channel"},{"location":"01_introduction_to_algo_network/#sprint-grooming","text":"Di Algo Network dan semua unit bisnisnya, menganut sistem Sprint yang merupakan turunan dari sistem Agile dan metodologi dari Scrum. Sprint digunakan untuk mendeskripsikan satu siklus pengembangan yang terbatas waktu. Sprint biasanya berlangsung selama 1 minggu atau 5 hari kerja dari Senin sampai Jumat, dengan tujuan untuk menghasilkan produk, fitur, atau hasil pekerjaan yang dapat dioperasikan dan siap untuk diluncurkan atau tahapan pengembangan selanjutnya. Di dalam 1 sprint ini ada terjadi beberapa event: Task Delegation: Proses pemberian tugas dari Eric ke masing-masing Lead Divisi Task Break Down: Proses break-down atau perincian tugas dari masing-masing Lead Divisi untuk setiap anggota timnya Sprint Grooming: Proses memposting task apa saja yang akan dikerjakan selama 1 sprint itu Development: Proses pengerjaan dan pengembangan selama 1 sprint (5 hari kerja) Weekly Report: Proses pelaporan di akhir minggu, apa saja yang sudah dan belum selesai","title":"Sprint grooming"},{"location":"01_introduction_to_algo_network/#daily-standup","text":"Merupakan meeting yang diadakan setiap harinya untuk mengontrol proses pengerjaan dan pengembangan, melakukan daily report, terjadi di sore hari jam 5","title":"Daily standup"},{"location":"01_introduction_to_algo_network/#mandatory-meetings","text":"Ada beberapa meeting penting di dalam Algo Network: Monthly sync Town hall Training of Trainer Meeting divisi Kembali ke Home","title":"Mandatory meetings"},{"location":"02_data_analyst_business_intelligence/","text":"Data Analyst & Business Intelligence Tableau over Looker Studio Google Spreadsheet over Excel Python over R MySQL & PostgreSQL Kembali ke Home","title":"Data Analyst & Business Intelligence"},{"location":"02_data_analyst_business_intelligence/#data-analyst-business-intelligence","text":"Tableau over Looker Studio Google Spreadsheet over Excel Python over R MySQL & PostgreSQL Kembali ke Home","title":"Data Analyst &amp; Business Intelligence"},{"location":"03_iot/","text":"Internet of Things (IoT) ESP32 or STM32 as master Arduino, ESP8266, Raspberry, and Jetson as slave Kembali ke Home","title":"Internet of Things (IoT)"},{"location":"03_iot/#internet-of-things-iot","text":"ESP32 or STM32 as master Arduino, ESP8266, Raspberry, and Jetson as slave Kembali ke Home","title":"Internet of Things (IoT)"},{"location":"04_ai_ml_modelling/","text":"AI/ML Modelling ML Classifiers LazyPredict Deep Learning framework TensorFlow PyTorch Image classification Teachable machine Vision Transformers (ViT) from HuggingFace models Object detection YOLOv8 Sentiment analysis BERT-based model LLM OpenAI API Kembali ke Home","title":"AI/ML Modelling"},{"location":"04_ai_ml_modelling/#aiml-modelling","text":"","title":"AI/ML Modelling"},{"location":"04_ai_ml_modelling/#ml-classifiers","text":"LazyPredict","title":"ML Classifiers"},{"location":"04_ai_ml_modelling/#deep-learning-framework","text":"TensorFlow PyTorch","title":"Deep Learning framework"},{"location":"04_ai_ml_modelling/#image-classification","text":"Teachable machine Vision Transformers (ViT) from HuggingFace models","title":"Image classification"},{"location":"04_ai_ml_modelling/#object-detection","text":"YOLOv8","title":"Object detection"},{"location":"04_ai_ml_modelling/#sentiment-analysis","text":"BERT-based model","title":"Sentiment analysis"},{"location":"04_ai_ml_modelling/#llm","text":"OpenAI API Kembali ke Home","title":"LLM"},{"location":"05_ai_ml_deployment/","text":"AI/ML Deployment Untuk proses deployment model AI/ML, mari kita berfokus ke 3 tools ini saja Flask: Sebuah mini framework untuk webserver dengan menggunakan bahasa Python FastAPI: Mirip dengan Flask, namun dilengkapi dengan async keyword dan type hinting -nya Python Streamlit: Sebuah framework untuk deployment cepat karena memiliki banyak sekali komponen yang bisa dipanggil melalui fungsi Python Flask Dalam konteks deployment model AI/ML, kita bisa lakukan 2 pendekatan ini di Flask Web Monolitik API Web Monolitik artinya kita mendeploy model dalam satu aplikasi Flask yang menyediakan UI tampilan web dalam 1 direktori proyek yang sama Sedangkan API adalah kita hanya mendeploy model dan menjalankannya sebagai API, dalam hal ini, konteksnya adalah kita mereturn JSON Flask Web Monolitik Flask umumnya bisa digunakan untuk membuat sebuah backend sederhana seperti framework atau bahasa pemrograman lainnya, kata kuncinya dalah return jenis render_template() Simak materinya disini Mari gunakan virtual environment, pastikan sudah membuat dan masuk ke 1 folder proyek terlebih dahulu $ python -m venv .venv $ (Windows) .venv\\Scripts\\activate $ (UNIX/Linux) source .venv/bin/activate $ pip install flask gunicorn scikit-learn $ pip freeze > requirements.txt Gunakan text editor kesayangan kamu, dan buat file app.py , kita buat aplikasi web monolitik sederhana dengan menggunakan Flask from flask import Flask app = Flask(__name__) @app.route(\"/\") def index(): return \"Hello World!\" if __name__ == \"__main__\": app.run() Kembali ke terminal, jalankan flask run , dan buka di browser alamat localhost di 127.0.0.1:5000 (port default Flask berada di 5000) dan kamu akan mendapatkan tulisan Hello World! Flask API Flask bisa juga digunakan sebagai API untuk mendeploy model AI/ML, kunci utamanya adalah di jenis return jsonify() Simak materinya disini Ada aturan untuk mereturn JSON di berbagai bahasa, bentuknya harus seperti ini \"status\": { \"code\": 200, \"message\": \"Success fetching the API\", }, \"data\": None Struktur Folder Flask Ketika mendeploy model AI/ML untuk skala production, coba gunakan Flask Blueprint untuk modularisasi agar memudahkan ketika pengembangan Contoh Versi Web Monolitik (COMING SOON) Contoh Versi API Kembali ke Home","title":"AI/ML Deployment"},{"location":"05_ai_ml_deployment/#aiml-deployment","text":"Untuk proses deployment model AI/ML, mari kita berfokus ke 3 tools ini saja Flask: Sebuah mini framework untuk webserver dengan menggunakan bahasa Python FastAPI: Mirip dengan Flask, namun dilengkapi dengan async keyword dan type hinting -nya Python Streamlit: Sebuah framework untuk deployment cepat karena memiliki banyak sekali komponen yang bisa dipanggil melalui fungsi Python","title":"AI/ML Deployment"},{"location":"05_ai_ml_deployment/#flask","text":"Dalam konteks deployment model AI/ML, kita bisa lakukan 2 pendekatan ini di Flask Web Monolitik API Web Monolitik artinya kita mendeploy model dalam satu aplikasi Flask yang menyediakan UI tampilan web dalam 1 direktori proyek yang sama Sedangkan API adalah kita hanya mendeploy model dan menjalankannya sebagai API, dalam hal ini, konteksnya adalah kita mereturn JSON","title":"Flask"},{"location":"05_ai_ml_deployment/#flask-web-monolitik","text":"Flask umumnya bisa digunakan untuk membuat sebuah backend sederhana seperti framework atau bahasa pemrograman lainnya, kata kuncinya dalah return jenis render_template() Simak materinya disini Mari gunakan virtual environment, pastikan sudah membuat dan masuk ke 1 folder proyek terlebih dahulu $ python -m venv .venv $ (Windows) .venv\\Scripts\\activate $ (UNIX/Linux) source .venv/bin/activate $ pip install flask gunicorn scikit-learn $ pip freeze > requirements.txt Gunakan text editor kesayangan kamu, dan buat file app.py , kita buat aplikasi web monolitik sederhana dengan menggunakan Flask from flask import Flask app = Flask(__name__) @app.route(\"/\") def index(): return \"Hello World!\" if __name__ == \"__main__\": app.run() Kembali ke terminal, jalankan flask run , dan buka di browser alamat localhost di 127.0.0.1:5000 (port default Flask berada di 5000) dan kamu akan mendapatkan tulisan Hello World!","title":"Flask Web Monolitik"},{"location":"05_ai_ml_deployment/#flask-api","text":"Flask bisa juga digunakan sebagai API untuk mendeploy model AI/ML, kunci utamanya adalah di jenis return jsonify() Simak materinya disini Ada aturan untuk mereturn JSON di berbagai bahasa, bentuknya harus seperti ini \"status\": { \"code\": 200, \"message\": \"Success fetching the API\", }, \"data\": None","title":"Flask API"},{"location":"05_ai_ml_deployment/#struktur-folder-flask","text":"Ketika mendeploy model AI/ML untuk skala production, coba gunakan Flask Blueprint untuk modularisasi agar memudahkan ketika pengembangan Contoh Versi Web Monolitik (COMING SOON) Contoh Versi API Kembali ke Home","title":"Struktur Folder Flask"},{"location":"06_frontend/","text":"Frontend Vue with Vite Nuxt Alpine.js HTMX jQuery Jinja2 EJS Blade Tailwind UI Bootstrap Kembali ke Home","title":"Frontend"},{"location":"06_frontend/#frontend","text":"Vue with Vite Nuxt Alpine.js HTMX jQuery Jinja2 EJS Blade Tailwind UI Bootstrap Kembali ke Home","title":"Frontend"},{"location":"07_backend/","text":"Backend Flask Express Laravel with Livewire Golang (Very Serious Project, Performance Critical, User Oriented) Flask Untuk Flask bisa contoh ke sini Express Dalam menggunakan Express sebagai backend, ada 2 pendekatan: Web Monolitik API Web Monolitik artinya kita mendeploy backend dalam satu aplikasi Express yang menyediakan UI tampilan web dalam 1 direktori proyek yang sama, dengan menggunakan templating engine bernama EJS (Embedded JavaScript) Sedangkan API adalah kita hanya mendeploy backend dan menjalankannya sebagai API, dalam hal ini, konteksnya adalah kita mereturn JSON Untuk Express, ada arsitektur yang kita perlu sepakati. Buat sebuah proyek Node.js baru dengan menggunakan command npm init , dengan starting pointnya di server.js , isinya adalah seperti ini require(\"dotenv\").config(); const http = require(\"http\"); const app = require(\"./app\"); const PORT = process.env.PORT || 8000; const server = http.createServer(app); const start = async () => { try { server.listen(PORT, () => { console.log(`\ud83d\ude80 [SERVER] is running on port http://localhost:${PORT}`); }); } catch (error) { console.log(error); } }; start(); Kembali ke Home","title":"Backend"},{"location":"07_backend/#backend","text":"Flask Express Laravel with Livewire Golang (Very Serious Project, Performance Critical, User Oriented)","title":"Backend"},{"location":"07_backend/#flask","text":"Untuk Flask bisa contoh ke sini","title":"Flask"},{"location":"07_backend/#express","text":"Dalam menggunakan Express sebagai backend, ada 2 pendekatan: Web Monolitik API Web Monolitik artinya kita mendeploy backend dalam satu aplikasi Express yang menyediakan UI tampilan web dalam 1 direktori proyek yang sama, dengan menggunakan templating engine bernama EJS (Embedded JavaScript) Sedangkan API adalah kita hanya mendeploy backend dan menjalankannya sebagai API, dalam hal ini, konteksnya adalah kita mereturn JSON Untuk Express, ada arsitektur yang kita perlu sepakati. Buat sebuah proyek Node.js baru dengan menggunakan command npm init , dengan starting pointnya di server.js , isinya adalah seperti ini require(\"dotenv\").config(); const http = require(\"http\"); const app = require(\"./app\"); const PORT = process.env.PORT || 8000; const server = http.createServer(app); const start = async () => { try { server.listen(PORT, () => { console.log(`\ud83d\ude80 [SERVER] is running on port http://localhost:${PORT}`); }); } catch (error) { console.log(error); } }; start(); Kembali ke Home","title":"Express"},{"location":"08_mobile/","text":"Mobile Flutter (The first choice) Swift/Kotlin if requested Kembali ke Home","title":"Mobile"},{"location":"08_mobile/#mobile","text":"Flutter (The first choice) Swift/Kotlin if requested Kembali ke Home","title":"Mobile"},{"location":"09_qa_manual/","text":"QA Manual Kembali ke Home","title":"QA Manual"},{"location":"09_qa_manual/#qa-manual","text":"Kembali ke Home","title":"QA Manual"},{"location":"10_qa_automation/","text":"QA Automation Selenium Katalon Kembali ke Home","title":"QA Automation"},{"location":"10_qa_automation/#qa-automation","text":"Selenium Katalon Kembali ke Home","title":"QA Automation"},{"location":"11_database/","text":"Database MySQL PostgreSQL Firebase Firestore Kembali ke Home","title":"Database"},{"location":"11_database/#database","text":"MySQL PostgreSQL Firebase Firestore Kembali ke Home","title":"Database"},{"location":"12_deployment/","text":"Deployment Netlify Docker Cloud Run Cloud Functions App Engine Compute Instance Local VPS Kembali ke Home","title":"12 deployment"},{"location":"12_deployment/#deployment","text":"Netlify Docker Cloud Run Cloud Functions App Engine Compute Instance Local VPS Kembali ke Home","title":"Deployment"},{"location":"13_blockchain/","text":"Blockchain Solidity on Ethereum Rust on Solana Kembali ke Home","title":"Blockchain"},{"location":"13_blockchain/#blockchain","text":"Solidity on Ethereum Rust on Solana Kembali ke Home","title":"Blockchain"},{"location":"14_rnd/","text":"RnD Perplexity.ai Zotero Consensus AI Gdocs LaTeX Kembali ke Home","title":"14 rnd"},{"location":"14_rnd/#rnd","text":"Perplexity.ai Zotero Consensus AI Gdocs LaTeX Kembali ke Home","title":"RnD"},{"location":"15_ui_ux/","text":"UI/UX Design Figma Maze.io Whimsical Google Form Kembali ke Home","title":"15 ui ux"},{"location":"15_ui_ux/#uiux-design","text":"Figma Maze.io Whimsical Google Form Kembali ke Home","title":"UI/UX Design"},{"location":"16_graphic_design/","text":"Graphic Designs Adobe Illustrator Adobe Photoshop Kembali ke Home","title":"Graphic Designs"},{"location":"16_graphic_design/#graphic-designs","text":"Adobe Illustrator Adobe Photoshop Kembali ke Home","title":"Graphic Designs"},{"location":"17_project_management/","text":"Project Management Tools Figma Internal PRD Maker Kembali ke Home","title":"Project Management Tools"},{"location":"17_project_management/#project-management-tools","text":"Figma Internal PRD Maker Kembali ke Home","title":"Project Management Tools"},{"location":"18_seo_tools/","text":"SEO Tools Ahrefs Kembali ke Home","title":"SEO Tools"},{"location":"18_seo_tools/#seo-tools","text":"Ahrefs Kembali ke Home","title":"SEO Tools"}]}